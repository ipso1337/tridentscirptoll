-- Hitbox Expander Module
-- GitHub: https://github.com/ipso1337/tridentscirptoll/blob/main/function/combat/hitbox

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Global variables for external control
_G.HitboxSettings = _G.HitboxSettings or {
    enabled = false,
    size = Vector3.new(10, 10, 10),
    transparency = 0.5,
    canCollide = false,
    targetPart = "Head"
}

-- Internal variables
local connections = {}
local originalSizes = {}
local originalTransparencies = {}
local originalCanCollide = {}
local validTargets = {}

-- Utility functions
local function isValidTarget(character)
    if not character then return false end
    if character == LocalPlayer.Character then return false end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    
    local targetPart = character:FindFirstChild(_G.HitboxSettings.targetPart)
    if not targetPart then return false end
    
    return true
end

local function addTarget(character)
    if not isValidTarget(character) then return end
    
    local targetPart = character:FindFirstChild(_G.HitboxSettings.targetPart)
    if targetPart and not validTargets[character] then
        validTargets[character] = character
        
        -- Store original properties
        originalSizes[targetPart] = targetPart.Size
        originalTransparencies[targetPart] = targetPart.Transparency
        originalCanCollide[targetPart] = targetPart.CanCollide
    end
end

local function removeTarget(character)
    if validTargets[character] then
        local targetPart = character:FindFirstChild(_G.HitboxSettings.targetPart)
        if targetPart then
            -- Restore original properties
            if originalSizes[targetPart] then
                targetPart.Size = originalSizes[targetPart]
                originalSizes[targetPart] = nil
            end
            if originalTransparencies[targetPart] then
                targetPart.Transparency = originalTransparencies[targetPart]
                originalTransparencies[targetPart] = nil
            end
            if originalCanCollide[targetPart] then
                targetPart.CanCollide = originalCanCollide[targetPart]
                originalCanCollide[targetPart] = nil
            end
        end
        validTargets[character] = nil
    end
end

local function updateHitboxes()
    if not _G.HitboxSettings.enabled then return end
    
    for character, _ in pairs(validTargets) do
        if character and character.Parent then
            local targetPart = character:FindFirstChild(_G.HitboxSettings.targetPart)
            if targetPart then
                targetPart.Size = _G.HitboxSettings.size
                targetPart.Transparency = _G.HitboxSettings.transparency
                targetPart.CanCollide = _G.HitboxSettings.canCollide
            end
        else
            -- Clean up invalid characters
            validTargets[character] = nil
        end
    end
end

local function restoreHitboxes()
    for character, _ in pairs(validTargets) do
        if character and character.Parent then
            local targetPart = character:FindFirstChild(_G.HitboxSettings.targetPart)
            if targetPart then
                if originalSizes[targetPart] then
                    targetPart.Size = originalSizes[targetPart]
                end
                if originalTransparencies[targetPart] then
                    targetPart.Transparency = originalTransparencies[targetPart]
                end
                if originalCanCollide[targetPart] then
                    targetPart.CanCollide = originalCanCollide[targetPart]
                end
            end
        end
    end
end

-- Main functions
function _G.EnableHitboxExpander()
    if connections.heartbeat then return end
    
    _G.HitboxSettings.enabled = true
    
    -- Add existing characters
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            addTarget(player.Character)
        end
    end
    
    -- Connect to new characters
    connections.playerAdded = Players.PlayerAdded:Connect(function(player)
        if player.Character then
            addTarget(player.Character)
        end
        player.CharacterAdded:Connect(function(character)
            addTarget(character)
        end)
    end)
    
    connections.playerRemoving = Players.PlayerRemoving:Connect(function(player)
        if player.Character then
            removeTarget(player.Character)
        end
    end)
    
    -- Connect to existing players' character spawning
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            player.CharacterAdded:Connect(function(character)
                task.wait(0.1) -- Small delay to ensure character is fully loaded
                addTarget(character)
            end)
            player.CharacterRemoving:Connect(function(character)
                removeTarget(character)
            end)
        end
    end
    
    -- Main update loop
    connections.heartbeat = RunService.Heartbeat:Connect(updateHitboxes)
    
    print("Hitbox Expander enabled")
end

function _G.DisableHitboxExpander()
    _G.HitboxSettings.enabled = false
    
    -- Disconnect all connections
    for name, connection in pairs(connections) do
        if connection then
            connection:Disconnect()
            connections[name] = nil
        end
    end
    
    -- Restore all hitboxes
    restoreHitboxes()
    
    -- Clear data
    validTargets = {}
    originalSizes = {}
    originalTransparencies = {}
    originalCanCollide = {}
    
    print("Hitbox Expander disabled")
end

function _G.SetHitboxSize(size)
    if type(size) == "table" and size.X and size.Y and size.Z then
        _G.HitboxSettings.size = Vector3.new(size.X, size.Y, size.Z)
    elseif type(size) == "number" then
        _G.HitboxSettings.size = Vector3.new(size, size, size)
    end
end

function _G.SetHitboxTransparency(transparency)
    _G.HitboxSettings.transparency = math.clamp(transparency or 0.5, 0, 1)
end

function _G.SetHitboxCanCollide(canCollide)
    _G.HitboxSettings.canCollide = canCollide or false
end

function _G.SetHitboxTargetPart(part)
    local validParts = {
        "Head", "Torso", "LowerTorso", "UpperTorso", "HumanoidRootPart",
        "LeftUpperArm", "RightUpperArm", "LeftLowerArm", "RightLowerArm",
        "LeftHand", "RightHand", "LeftUpperLeg", "RightUpperLeg",
        "LeftLowerLeg", "RightLowerLeg", "LeftFoot", "RightFoot"
    }
    
    if table.find(validParts, part) then
        _G.HitboxSettings.targetPart = part
    end
end

function _G.CleanupHitboxExpander()
    _G.DisableHitboxExpander()
    _G.HitboxSettings = nil
    _G.EnableHitboxExpander = nil
    _G.DisableHitboxExpander = nil
    _G.SetHitboxSize = nil
    _G.SetHitboxTransparency = nil
    _G.SetHitboxCanCollide = nil
    _G.SetHitboxTargetPart = nil
    _G.CleanupHitboxExpander = nil
end

-- Auto cleanup on character respawn
if LocalPlayer.Character then
    LocalPlayer.Character.AncestryChanged:Connect(function()
        if not LocalPlayer.Character.Parent then
            _G.DisableHitboxExpander()
        end
    end)
end

LocalPlayer.CharacterAdded:Connect(function(character)
    character.AncestryChanged:Connect(function()
        if not character.Parent then
            _G.DisableHitboxExpander()
        end
    end)
end)
