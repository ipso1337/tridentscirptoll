-- Hitbox Expander Script
-- Required services
local workspace = cloneref(game:GetService("Workspace"))
local Players = cloneref(game:GetService("Players"))
local RunService = cloneref(game:GetService("RunService"))
local LocalPlayer = Players.LocalPlayer

-- Hitbox expander variables
local hitboxExpander = {
    enabled = false,
    connections = {},
    validCharacters = {},
    settings = {
        headSizeX = 10,
        headSizeY = 10,
        headSizeZ = 10,
        transparency = 0.5,
        canCollide = false,
        targetPart = "Head" -- Can be "Head", "Torso", "HumanoidRootPart", etc.
    }
}

-- Store original sizes
local originalSizes = {}

-- Functions to manage valid characters
local function addToValidCharacters(character)
    if not character then return end
    if not character:FindFirstChild("Humanoid") then return end
    if character == LocalPlayer.Character then return end -- Don't expand own hitbox
    
    local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
    if targetPart and not originalSizes[targetPart] then
        originalSizes[targetPart] = {
            size = targetPart.Size,
            transparency = targetPart.Transparency,
            canCollide = targetPart.CanCollide
        }
    end
    
    hitboxExpander.validCharacters[character] = character
end

local function removeFromValidCharacters(character)
    if hitboxExpander.validCharacters[character] then
        -- Restore original size before removing
        local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
        if targetPart and originalSizes[targetPart] then
            targetPart.Size = originalSizes[targetPart].size
            targetPart.Transparency = originalSizes[targetPart].transparency
            targetPart.CanCollide = originalSizes[targetPart].canCollide
            originalSizes[targetPart] = nil
        end
        
        hitboxExpander.validCharacters[character] = nil
    end
end

-- Initialize valid characters from existing players
local function initializeValidCharacters()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            addToValidCharacters(player.Character)
        end
    end
end

-- Hitbox expansion logic
local function expandHitboxes()
    if not hitboxExpander.enabled then return end
    
    local newSize = Vector3.new(
        hitboxExpander.settings.headSizeX,
        hitboxExpander.settings.headSizeY,
        hitboxExpander.settings.headSizeZ
    )
    
    for character, _ in pairs(hitboxExpander.validCharacters) do
        if character and character.Parent then
            local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
            if targetPart then
                targetPart.Size = newSize
                targetPart.Transparency = hitboxExpander.settings.transparency
                targetPart.CanCollide = hitboxExpander.settings.canCollide
            end
        end
    end
end

-- Restore original hitboxes
local function restoreHitboxes()
    for character, _ in pairs(hitboxExpander.validCharacters) do
        if character and character.Parent then
            local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
            if targetPart and originalSizes[targetPart] then
                targetPart.Size = originalSizes[targetPart].size
                targetPart.Transparency = originalSizes[targetPart].transparency
                targetPart.CanCollide = originalSizes[targetPart].canCollide
            end
        end
    end
end

-- Global functions for GUI integration
_G.EnableHitboxExpander = function()
    if hitboxExpander.enabled then return end
    
    hitboxExpander.enabled = true
    
    -- Initialize characters
    initializeValidCharacters()
    
    -- Connect to player events
    hitboxExpander.connections.playerAdded = Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            addToValidCharacters(character)
        end)
        
        player.CharacterRemoving:Connect(function(character)
            removeFromValidCharacters(character)
        end)
        
        if player.Character then
            addToValidCharacters(player.Character)
        end
    end)
    
    hitboxExpander.connections.playerRemoving = Players.PlayerRemoving:Connect(function(player)
        if player.Character then
            removeFromValidCharacters(player.Character)
        end
    end)
    
    -- Connect expansion logic to heartbeat
    hitboxExpander.connections.heartbeat = RunService.Heartbeat:Connect(expandHitboxes)
    
    print("Hitbox Expander enabled")
end

_G.DisableHitboxExpander = function()
    if not hitboxExpander.enabled then return end
    
    hitboxExpander.enabled = false
    
    -- Restore all hitboxes
    restoreHitboxes()
    
    -- Disconnect all connections
    for name, connection in pairs(hitboxExpander.connections) do
        connection:Disconnect()
        hitboxExpander.connections[name] = nil
    end
    
    -- Clear valid characters
    for character, _ in pairs(hitboxExpander.validCharacters) do
        hitboxExpander.validCharacters[character] = nil
    end
    
    print("Hitbox Expander disabled")
end

_G.SetHitboxSize = function(x, y, z)
    if x then hitboxExpander.settings.headSizeX = x end
    if y then hitboxExpander.settings.headSizeY = y end
    if z then hitboxExpander.settings.headSizeZ = z or x end -- Default Z to X if not provided
    
    if hitboxExpander.enabled then
        expandHitboxes()
    end
end

_G.SetHitboxTransparency = function(transparency)
    hitboxExpander.settings.transparency = transparency or 0.5
    
    if hitboxExpander.enabled then
        expandHitboxes()
    end
end

_G.SetHitboxTargetPart = function(partName)
    if not partName then return end
    
    -- Disable first to restore original sizes
    local wasEnabled = hitboxExpander.enabled
    if wasEnabled then
        _G.DisableHitboxExpander()
    end
    
    -- Clear original sizes since we're changing target part
    originalSizes = {}
    
    -- Set new target part
    hitboxExpander.settings.targetPart = partName
    
    -- Re-enable if it was enabled
    if wasEnabled then
        _G.EnableHitboxExpander()
    end
end

_G.CleanupHitboxExpander = function()
    _G.DisableHitboxExpander()
    
    -- Clear all references
    hitboxExpander.validCharacters = {}
    originalSizes = {}
    
    print("Hitbox Expander cleaned up")
end

-- Initialize with current players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            if hitboxExpander.enabled then
                addToValidCharacters(character)
            end
        end)
        
        player.CharacterRemoving:Connect(function(character)
            if hitboxExpander.enabled then
                removeFromValidCharacters(character)
            end
        end)
    end
end

print("Hitbox Expander script loaded")
