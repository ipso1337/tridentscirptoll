local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local AimbotEnabled = false
local Smoothness = 50
local FOV = 30
local Shake = 5
local HitPart = "Head"
local Keybind = Enum.KeyCode.C

-- All available skeleton parts
local skeleton_parts = {
	"Head", "Torso", "LowerTorso", "LeftUpperArm", "RightUpperArm", 
	"LeftLowerArm", "RightLowerArm", "LeftHand", "RightHand", 
	"LeftUpperLeg", "RightUpperLeg", "LeftLowerLeg", "RightLowerLeg", 
	"LeftFoot", "RightFoot", "HumanoidRootPart"
}

-- Skeleton connection order
local skeleton_order = {
	["LeftFoot"] = "LeftLowerLeg",
	["LeftLowerLeg"] = "LeftUpperLeg",
	["LeftUpperLeg"] = "LowerTorso",
	["RightFoot"] = "RightLowerLeg",
	["RightLowerLeg"] = "RightUpperLeg",
	["RightUpperLeg"] = "LowerTorso",
	["LeftHand"] = "LeftLowerArm",
	["LeftLowerArm"] = "LeftUpperArm",
	["LeftUpperArm"] = "Torso",
	["RightHand"] = "RightLowerArm",
	["RightLowerArm"] = "RightUpperArm",
	["RightUpperArm"] = "Torso",
	["LowerTorso"] = "Torso",
	["Torso"] = "Head"
}

-- Visible Check
local function isVisible(part)
	local origin = Camera.CFrame.Position
	local direction = (part.Position - origin).Unit * 1000
	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
	
	local result = workspace:Raycast(origin, direction, raycastParams)
	return result and result.Instance and part:IsDescendantOf(result.Instance:FindFirstAncestorOfClass("Model"))
end

-- Check if a part exists in character
local function partExists(character, partName)
	return character and character:FindFirstChild(partName)
end

-- Get Closest Target
local function getClosest()
	local closest = nil
	local shortest = math.huge
	
	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= LocalPlayer and plr.Character then
			local part = nil
			
			-- Try to find the specified hit part
			if partExists(plr.Character, HitPart) then
				part = plr.Character[HitPart]
			else
				-- If the specified part doesn't exist, try to find any available skeleton part
				for _, skelPart in ipairs(skeleton_parts) do
					if partExists(plr.Character, skelPart) then
						part = plr.Character[skelPart]
						break
					end
				end
			end
			
			-- If we found a valid part, check visibility and distance
			if part then
				local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
				if onScreen and isVisible(part) then
					local dist = (Vector2.new(screenPos.X, screenPos.Y) - UserInputService:GetMouseLocation()).Magnitude
					if dist < shortest and dist <= FOV * 10 then
						shortest = dist
						closest = part
					end
				end
			end
		end
	end
	return closest
end

-- FOV Circle
local DrawingFOV = Drawing.new("Circle")
DrawingFOV.Visible = true
DrawingFOV.Thickness = 1
DrawingFOV.NumSides = 100
DrawingFOV.Radius = FOV * 4
DrawingFOV.Transparency = 1
DrawingFOV.Color = Color3.fromRGB(255, 255, 255)
DrawingFOV.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

local connection
connection = RunService.RenderStepped:Connect(function()
	DrawingFOV.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
	DrawingFOV.Radius = FOV * 4
	
	if not AimbotEnabled or not UserInputService:IsKeyDown(Keybind) then
		DrawingFOV.Color = Color3.fromRGB(255, 255, 255)
		return
	end
	
	local target = getClosest()
	if not target then
		DrawingFOV.Color = Color3.fromRGB(255, 255, 255)
		return
	end
	
	-- Aiming
	local targetCF = CFrame.new(Camera.CFrame.Position, target.Position)
	Camera.CFrame = Camera.CFrame:Lerp(targetCF, Smoothness / 100)
	
	-- Shake
	if Shake > 0 then
		local offset = Vector3.new(
			math.random(-Shake, Shake) / 200,
			math.random(-Shake, Shake) / 200,
			math.random(-Shake, Shake) / 200
		)
		Camera.CFrame = Camera.CFrame * CFrame.new(offset)
	end
	
	DrawingFOV.Color = Color3.fromRGB(255, 0, 0)
end)

-- Cleanup function
local function cleanup()
	if connection then
		connection:Disconnect()
		connection = nil
	end
	if DrawingFOV then
		DrawingFOV:Remove()
		DrawingFOV = nil
	end
end

-- API Functions
_G.EnableAimbot = function() 
	AimbotEnabled = true 
	print("Aimbot enabled with keybind:", Keybind.Name)
	print("Target part:", HitPart)
end

_G.DisableAimbot = function() 
	AimbotEnabled = false 
	print("Aimbot disabled")
end

_G.SetAimbotSmooth = function(v) 
	Smoothness = v 
	print("Aimbot smoothness set to:", v)
end

_G.SetAimbotFOV = function(v) 
	FOV = v 
	print("Aimbot FOV set to:", v)
end

_G.SetAimbotShake = function(v) 
	Shake = v 
	print("Aimbot shake set to:", v)
end

_G.SetAimbotPart = function(v) 
	-- Validate the part name
	local validPart = false
	for _, skelPart in ipairs(skeleton_parts) do
		if skelPart == v then
			validPart = true
			break
		end
	end
	
	if validPart then
		HitPart = v 
		print("Aimbot target part set to:", v)
	else
		print("Invalid part name:", v, "- keeping current part:", HitPart)
	end
end

_G.SetAimbotKeybind = function(v)
	print("Received keybind value:", v, "Type:", type(v))
	
	-- Handle different types of input
	if type(v) == "string" then
		-- If it's a string, try to convert to KeyCode
		local keyCode = Enum.KeyCode[v]
		if keyCode then
			Keybind = keyCode
			print("Keybind set to:", Keybind.Name)
		else
			print("Invalid keybind string:", v)
		end
	elseif type(v) == "userdata" and tostring(v):find("KeyCode") then
		-- If it's already a KeyCode enum
		Keybind = v
		print("Keybind set to:", Keybind.Name)
	elseif type(v) == "table" and v.Value then
		-- If it's wrapped in a table (some libraries do this)
		_G.SetAimbotKeybind(v.Value)
	else
		print("Unknown keybind format, keeping default 'C'")
		Keybind = Enum.KeyCode.C
	end
end

-- Cleanup on script unload
_G.CleanupAimbot = cleanup

-- Print available parts for debugging
print("Aimbot script loaded successfully!")
print("Current keybind:", Keybind.Name)
print("Available skeleton parts:", table.concat(skeleton_parts, ", "))
