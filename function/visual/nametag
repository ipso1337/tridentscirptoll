local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera

local settings = {
    enabled = true,
    sleep_check = true,
    show_weapons = false,
    color = Color3.new(1, 1, 1),
    transparency = 0,
    teamcheck = false,
    team_color = false,
    maxdistance = 200,
    distancelimit = false,
    text_size = 16,
    show_distance = true,
    show_health = true,
    outline = true
}

local function worldToScreen(world)
    local screen, inBounds = Camera:WorldToViewportPoint(world)
    return Vector2.new(screen.X, screen.Y), inBounds, screen.Z
end

local function sleepCheck(player)
    local animations = player:FindFirstChild("AnimationController") and player.AnimationController:GetPlayingAnimationTracks()
    if animations then
        for _, v in pairs(animations) do
            if v.IsPlaying and v.Animation.AnimationId == "rbxassetid://13280887764" then
                return true
            end
        end
    end
    return false
end

local function getEquippedWeapon(character)
    local tool = character:FindFirstChildOfClass("Tool")
    return tool and tool.Name or "None"
end

local function createTextLabel(text, color, size)
    local label = Drawing.new("Text")
    label.Visible = false
    label.Text = text
    label.Color = color
    label.Size = size
    label.Center = true
    label.Outline = settings.outline
    label.Font = Drawing.Fonts.UI
    label.Transparency = 1 - settings.transparency
    return label
end

local function createHealthBar()
    local background = Drawing.new("Square")
    background.Visible = false
    background.Filled = true
    background.Color = Color3.new(0, 0, 0)
    background.Transparency = 0.5
    background.Thickness = 1
    
    local foreground = Drawing.new("Square")
    foreground.Visible = false
    foreground.Filled = true
    foreground.Color = Color3.new(0, 1, 0)
    foreground.Transparency = 0
    foreground.Thickness = 1
    
    return {background = background, foreground = foreground}
end

local loaded_players = {}

local function create_nametags(model)
    if not (model and model:FindFirstChild("Head") and model:FindFirstChild("LowerTorso")) then
        return
    end
    
    if model:FindFirstChild("Head") and model.Head:FindFirstChild("Nametag") and 
       model.Head.Nametag:FindFirstChild("tag") and model.Head.Nametag.tag.Text == "Shylou2644" then
        return
    end
    
    local player = nil
    for _, p in pairs(Players:GetPlayers()) do
        if p.Character == model then
            player = p
            break
        end
    end
    
    loaded_players[model] = {
        player = player,
        obj = {
            nameLabel = createTextLabel("Player", settings.color, settings.text_size),
            healthBar = createHealthBar()
        },
        connection = nil
    }
    
    local plr_data = loaded_players[model]
    local obj = plr_data.obj
    local character = model
    local head = model:FindFirstChild("Head")
    local lowertorso = model:FindFirstChild("LowerTorso")
    local humanoid = model:FindFirstChild("Humanoid")

    plr_data.connection = RunService.RenderStepped:Connect(function()
        if not (settings.enabled and head and character and character.Parent) then
            obj.nameLabel.Visible = false
            obj.healthBar.background.Visible = false
            obj.healthBar.foreground.Visible = false
            return
        end
        
        if humanoid and humanoid.Health <= 0 then
            obj.nameLabel.Visible = false
            obj.healthBar.background.Visible = false
            obj.healthBar.foreground.Visible = false
            return
        end

        if settings.sleep_check and sleepCheck(character) then
            obj.nameLabel.Visible = false
            obj.healthBar.background.Visible = false
            obj.healthBar.foreground.Visible = false
            return
        end

        local screenPos, onScreen = worldToScreen(head.Position + Vector3.new(0, 1, 0))
        if not onScreen then
            obj.nameLabel.Visible = false
            obj.healthBar.background.Visible = false
            obj.healthBar.foreground.Visible = false
            return
        end

        local distance = (Camera.CFrame.Position - head.Position).Magnitude
        if settings.distancelimit and distance > settings.maxdistance then
            obj.nameLabel.Visible = false
            obj.healthBar.background.Visible = false
            obj.healthBar.foreground.Visible = false
            return
        end

        if settings.teamcheck and plr_data.player and Players.LocalPlayer then
            if plr_data.player.Team == Players.LocalPlayer.Team then
                obj.nameLabel.Visible = false
                obj.healthBar.background.Visible = false
                obj.healthBar.foreground.Visible = false
                return
            end
        end

        local playerName = "Player"
        if head:FindFirstChild("Nametag") and head.Nametag:FindFirstChild("tag") and head.Nametag.tag.Text ~= "" then
            playerName = head.Nametag.tag.Text
        end

        local textColor = settings.color
        if settings.team_color and plr_data.player and plr_data.player.TeamColor then
            textColor = plr_data.player.TeamColor.Color
        end

        local textSize = math.clamp(1000 / distance, 12, 24)

        local displayText = playerName
        if settings.show_distance then
            displayText = playerName .. " [" .. math.floor(distance) .. "]"
        end
        
        if settings.show_weapons then
            local weapon = getEquippedWeapon(character)
            displayText = displayText .. " | " .. weapon
        end

        obj.nameLabel.Text = displayText
        obj.nameLabel.Position = screenPos
        obj.nameLabel.Color = textColor
        obj.nameLabel.Size = textSize
        obj.nameLabel.Transparency = 1 - settings.transparency
        obj.nameLabel.Visible = true

        if settings.show_health and humanoid then
            local healthPercentage = humanoid.Health / humanoid.MaxHealth
            local barWidth = 60 * (textSize / 16)
            local barHeight = 6
            local barY = screenPos.Y + textSize + 5

            obj.healthBar.background.Size = Vector2.new(barWidth, barHeight)
            obj.healthBar.background.Position = Vector2.new(screenPos.X - barWidth/2, barY)
            obj.healthBar.background.Visible = true

            local healthWidth = barWidth * healthPercentage
            obj.healthBar.foreground.Size = Vector2.new(healthWidth, barHeight)
            obj.healthBar.foreground.Position = Vector2.new(screenPos.X - barWidth/2, barY)
            
            if healthPercentage > 0.6 then
                obj.healthBar.foreground.Color = Color3.new(0, 1, 0)
            elseif healthPercentage > 0.3 then
                obj.healthBar.foreground.Color = Color3.new(1, 1, 0)
            else
                obj.healthBar.foreground.Color = Color3.new(1, 0, 0)
            end
            
            obj.healthBar.foreground.Visible = true
        else
            obj.healthBar.background.Visible = false
            obj.healthBar.foreground.Visible = false
        end
    end)
end

local function destroy_nametags(model)
    local plr_data = loaded_players[model]
    if not plr_data then return end
    
    if plr_data.connection then
        plr_data.connection:Disconnect()
    end
    
    plr_data.obj.nameLabel:Remove()
    plr_data.obj.healthBar.background:Remove()
    plr_data.obj.healthBar.foreground:Remove()
    
    loaded_players[model] = nil
end

for _, v in ipairs(Workspace:GetChildren()) do
    create_nametags(v)
end

Workspace.ChildAdded:Connect(create_nametags)
Workspace.ChildRemoved:Connect(destroy_nametags)

_G.DisableNametags = function()
    settings.enabled = false
end

_G.EnableNametags = function()
    settings.enabled = true
end

_G.SetNametagsSleepCheck = function(value)
    settings.sleep_check = value
end

_G.SetNametagsShowWeapons = function(value)
    settings.show_weapons = value
end

_G.CleanupNametags = function()
    for model, plr_data in pairs(loaded_players) do
        destroy_nametags(model)
    end
end

game:BindToClose(function()
    for model, plr_data in pairs(loaded_players) do
        destroy_nametags(model)
    end
end)
