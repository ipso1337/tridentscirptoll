-- Fixed Hitbox Expander Script
local workspace = cloneref and cloneref(game:GetService("Workspace")) or game:GetService("Workspace")
local Players = cloneref and cloneref(game:GetService("Players")) or game:GetService("Players")
local RunService = cloneref and cloneref(game:GetService("RunService")) or game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Hitbox expander variables
local hitboxExpander = {
    enabled = false,
    connections = {},
    validCharacters = {},
    originalSizes = {},
    settings = {
        headSizeX = 10,
        headSizeY = 10,
        headSizeZ = 10,
        transparency = 0.5,
        canCollide = false,
        targetPart = "Head"
    }
}

-- Helper function to get all players except local player
local function getAllEnemyPlayers()
    local enemies = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            table.insert(enemies, player.Character)
        end
    end
    return enemies
end

-- Function to store original size of a part
local function storeOriginalSize(part)
    if not hitboxExpander.originalSizes[part] then
        hitboxExpander.originalSizes[part] = {
            size = part.Size,
            transparency = part.Transparency,
            canCollide = part.CanCollide
        }
    end
end

-- Function to restore original size of a part
local function restoreOriginalSize(part)
    if hitboxExpander.originalSizes[part] then
        part.Size = hitboxExpander.originalSizes[part].size
        part.Transparency = hitboxExpander.originalSizes[part].transparency
        part.CanCollide = hitboxExpander.originalSizes[part].canCollide
        hitboxExpander.originalSizes[part] = nil
    end
end

-- Function to expand hitboxes
local function expandHitboxes()
    if not hitboxExpander.enabled then return end
    
    local newSize = Vector3.new(
        hitboxExpander.settings.headSizeX,
        hitboxExpander.settings.headSizeY,
        hitboxExpander.settings.headSizeZ
    )
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
            
            if targetPart then
                -- Store original size if not already stored
                storeOriginalSize(targetPart)
                
                -- Apply new size
                targetPart.Size = newSize
                targetPart.Transparency = hitboxExpander.settings.transparency
                targetPart.CanCollide = hitboxExpander.settings.canCollide
            end
        end
    end
end

-- Function to restore all hitboxes
local function restoreAllHitboxes()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local character = player.Character
            local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
            
            if targetPart then
                restoreOriginalSize(targetPart)
            end
        end
    end
end

-- Global functions for GUI integration
_G.EnableHitboxExpander = function()
    if hitboxExpander.enabled then return end
    
    hitboxExpander.enabled = true
    
    -- Connect expansion logic to heartbeat for continuous updates
    hitboxExpander.connections.heartbeat = RunService.Heartbeat:Connect(expandHitboxes)
    
    -- Handle new players joining
    hitboxExpander.connections.playerAdded = Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            wait(0.1) -- Small delay to ensure character is fully loaded
            if hitboxExpander.enabled then
                local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
                if targetPart then
                    storeOriginalSize(targetPart)
                end
            end
        end)
    end)
    
    -- Handle players leaving
    hitboxExpander.connections.playerRemoving = Players.PlayerRemoving:Connect(function(player)
        if player.Character then
            local targetPart = player.Character:FindFirstChild(hitboxExpander.settings.targetPart)
            if targetPart and hitboxExpander.originalSizes[targetPart] then
                hitboxExpander.originalSizes[targetPart] = nil
            end
        end
    end)
    
    print("Hitbox Expander enabled")
end

_G.DisableHitboxExpander = function()
    if not hitboxExpander.enabled then return end
    
    hitboxExpander.enabled = false
    
    -- Restore all hitboxes before disabling
    restoreAllHitboxes()
    
    -- Disconnect all connections
    for name, connection in pairs(hitboxExpander.connections) do
        if connection then
            connection:Disconnect()
        end
        hitboxExpander.connections[name] = nil
    end
    
    -- Clear original sizes table
    hitboxExpander.originalSizes = {}
    
    print("Hitbox Expander disabled")
end

_G.SetHitboxSize = function(x, y, z)
    if x then hitboxExpander.settings.headSizeX = x end
    if y then hitboxExpander.settings.headSizeY = y end
    if z then hitboxExpander.settings.headSizeZ = z or x end
    
    print("Hitbox size updated to:", hitboxExpander.settings.headSizeX, hitboxExpander.settings.headSizeY, hitboxExpander.settings.headSizeZ)
end

_G.SetHitboxTransparency = function(transparency)
    hitboxExpander.settings.transparency = math.clamp(transparency or 0.5, 0, 1)
    print("Hitbox transparency updated to:", hitboxExpander.settings.transparency)
end

_G.SetHitboxTargetPart = function(partName)
    if not partName then return end
    
    -- Restore current hitboxes before changing target part
    if hitboxExpander.enabled then
        restoreAllHitboxes()
    end
    
    -- Set new target part
    hitboxExpander.settings.targetPart = partName
    hitboxExpander.originalSizes = {} -- Clear original sizes since we're changing parts
    
    print("Hitbox target part changed to:", partName)
end

_G.CleanupHitboxExpander = function()
    _G.DisableHitboxExpander()
    
    -- Clear all data
    hitboxExpander.validCharacters = {}
    hitboxExpander.originalSizes = {}
    hitboxExpander.connections = {}
    
    print("Hitbox Expander cleaned up")
end

-- Initialize connections for existing players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            wait(0.1) -- Small delay to ensure character is fully loaded
            if hitboxExpander.enabled then
                local targetPart = character:FindFirstChild(hitboxExpander.settings.targetPart)
                if targetPart then
                    storeOriginalSize(targetPart)
                end
            end
        end)
    end
end

print("Fixed Hitbox Expander script loaded")
