-- 3D Box ESP Script
-- Services
local RunService = game:GetService("RunService")
local PlayersService = game:GetService("Players")

-- Variables
local Camera = workspace.CurrentCamera
local LocalPlayer = PlayersService.LocalPlayer
local Lines = {}
local Quads = {}
local ESPConnection = nil
local ESPEnabled = true

-- Functions
local function HasCharacter(Player)
    return Player and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player ~= LocalPlayer
end

local function DrawQuad(PosA, PosB, PosC, PosD)
    local PosAScreen, PosAVisible = Camera:WorldToViewportPoint(PosA)
    local PosBScreen, PosBVisible = Camera:WorldToViewportPoint(PosB)
    local PosCScreen, PosCVisible = Camera:WorldToViewportPoint(PosC)
    local PosDScreen, PosDVisible = Camera:WorldToViewportPoint(PosD)

    if not PosAVisible and not PosBVisible and not PosCVisible and not PosDVisible then
        return
    end

    local PosAVec = Vector2.new(PosAScreen.X, PosAScreen.Y)
    local PosBVec = Vector2.new(PosBScreen.X, PosBScreen.Y)
    local PosCVec = Vector2.new(PosCScreen.X, PosCScreen.Y)
    local PosDVec = Vector2.new(PosDScreen.X, PosDScreen.Y)

    local Quad = Drawing.new("Quad")
    Quad.Thickness = 0.5
    Quad.Color = Color3.fromRGB(255, 255, 255)
    Quad.Transparency = 0.25
    Quad.ZIndex = 1
    Quad.Filled = true
    Quad.Visible = true

    Quad.PointA = PosAVec
    Quad.PointB = PosBVec
    Quad.PointC = PosCVec
    Quad.PointD = PosDVec

    table.insert(Quads, Quad)
end

local function DrawLine(From, To)
    local FromScreen, FromVisible = Camera:WorldToViewportPoint(From)
    local ToScreen, ToVisible = Camera:WorldToViewportPoint(To)

    if not FromVisible and not ToVisible then
        return
    end

    local FromPos = Vector2.new(FromScreen.X, FromScreen.Y)
    local ToPos = Vector2.new(ToScreen.X, ToScreen.Y)

    local Line = Drawing.new("Line")
    Line.Thickness = 1
    Line.From = FromPos
    Line.To = ToPos
    Line.Color = Color3.fromRGB(255, 255, 255)
    Line.Transparency = 1
    Line.ZIndex = 1
    Line.Visible = true

    table.insert(Lines, Line)
end

-- Get corners function (vertices)
local function GetCorners(Part)
    local CF, Size, Corners = Part.CFrame, Part.Size / 2, {}
    for X = -1, 1, 2 do
        for Y = -1, 1, 2 do
            for Z = -1, 1, 2 do
                Corners[#Corners + 1] = (CF * CFrame.new(Size * Vector3.new(X, Y, Z))).Position
            end
        end
    end
    return Corners
end

local function DrawEsp(Player)
    if not HasCharacter(Player) then return end
    
    local HRP = Player.Character.HumanoidRootPart

    -- Construct 3D box
    local CubeVertices = GetCorners({
        CFrame = HRP.CFrame * CFrame.new(0, -0.5, 0), 
        Size = Vector3.new(3, 5, 3)
    })

    -- Draw the 3D box
    -- Bottom face
    DrawLine(CubeVertices[1], CubeVertices[2])
    DrawLine(CubeVertices[2], CubeVertices[6])
    DrawLine(CubeVertices[6], CubeVertices[5])
    DrawLine(CubeVertices[5], CubeVertices[1])
    DrawQuad(CubeVertices[1], CubeVertices[2], CubeVertices[6], CubeVertices[5])

    -- Side faces
    DrawLine(CubeVertices[1], CubeVertices[3])
    DrawLine(CubeVertices[2], CubeVertices[4])
    DrawLine(CubeVertices[6], CubeVertices[8])
    DrawLine(CubeVertices[5], CubeVertices[7])

    DrawQuad(CubeVertices[2], CubeVertices[4], CubeVertices[8], CubeVertices[6])
    DrawQuad(CubeVertices[1], CubeVertices[2], CubeVertices[4], CubeVertices[3])
    DrawQuad(CubeVertices[1], CubeVertices[5], CubeVertices[7], CubeVertices[3])
    DrawQuad(CubeVertices[5], CubeVertices[7], CubeVertices[8], CubeVertices[6])

    -- Top face
    DrawLine(CubeVertices[3], CubeVertices[4])
    DrawLine(CubeVertices[4], CubeVertices[8])
    DrawLine(CubeVertices[8], CubeVertices[7])
    DrawLine(CubeVertices[7], CubeVertices[3])
    DrawQuad(CubeVertices[3], CubeVertices[4], CubeVertices[8], CubeVertices[7])
end

local function ClearESP()
    -- Clear lines
    for i = 1, #Lines do
        local Line = Lines[i]
        if Line then
            Line:Remove()
        end
    end
    Lines = {}

    -- Clear quads
    for i = 1, #Quads do
        local Quad = Quads[i]
        if Quad then
            Quad:Remove()
        end
    end
    Quads = {}
end

local function BoxESP()
    if not ESPEnabled then
        ClearESP()
        return
    end

    ClearESP()
    
    local Players = PlayersService:GetPlayers()
    for i = 1, #Players do
        local Player = Players[i]
        if HasCharacter(Player) then
            DrawEsp(Player)
        end
    end
end

-- Main connection
if ESPConnection then
    ESPConnection:Disconnect()
end

ESPConnection = RunService.RenderStepped:Connect(BoxESP)

-- Global function to disable ESP (called when "none" is selected)
_G.DisableBoxESP = function()
    ESPEnabled = false
    ClearESP()
end

-- Global function to enable ESP (called when "3d" is selected)
_G.EnableBoxESP = function()
    ESPEnabled = true
end

-- Cleanup function
_G.CleanupBoxESP = function()
    if ESPConnection then
        ESPConnection:Disconnect()
        ESPConnection = nil
    end
    ClearESP()
end
