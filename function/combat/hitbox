-- Hitbox System Configuration
local HitboxConfig = {
    SelectPart = "Head",           -- –ß–∞—Å—Ç—å —Ç–µ–ª–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ö–∏—Ç–±–æ–∫—Å–∞
    SizeX = 3,                     -- –†–∞–∑–º–µ—Ä –ø–æ X
    SizeY = 5,                     -- –†–∞–∑–º–µ—Ä –ø–æ Y  
    SizeZ = 3,                     -- –†–∞–∑–º–µ—Ä –ø–æ Z
    Transparency = 0,              -- –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0 = –Ω–µ–≤–∏–¥–∏–º—ã–π, 1 = –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º—ã–π)
    Color = BrickColor.new("Bright violet"), -- –¶–≤–µ—Ç —Ö–∏—Ç–±–æ–∫—Å–∞
    CanCollide = false,            -- –ú–æ–∂–µ—Ç –ª–∏ —Ö–∏—Ç–±–æ–∫—Å —Å—Ç–∞–ª–∫–∏–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    Anchored = true,               -- –ó–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —Ö–∏—Ç–±–æ–∫—Å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    UpdateRate = 0.1               -- –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 = –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
}

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
local hitboxList = {}
local hitboxConnections = {}
local isHitboxEnabled = false

-- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_G.EnableHitboxExpander = nil
_G.DisableHitboxExpander = nil
_G.CleanupHitboxExpander = nil
_G.SetHitboxSize = nil
_G.SetHitboxTransparency = nil
_G.SetHitboxCanCollide = nil
_G.SetHitboxTargetPart = nil

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∏—Ç–±–æ–∫—Å–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
local function CreateHitbox(player)
    if not player:FindFirstChild("HumanoidRootPart") or player:FindFirstChild("FakeHitbox") then
        return
    end
    
    -- –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–∏—Ç–±–æ–∫—Å
    local fakeHitbox = Instance.new("Part", player)
    fakeHitbox.Name = HitboxConfig.SelectPart
    fakeHitbox.Size = Vector3.new(HitboxConfig.SizeX, HitboxConfig.SizeY, HitboxConfig.SizeZ)
    fakeHitbox.Anchored = HitboxConfig.Anchored
    fakeHitbox.CanCollide = HitboxConfig.CanCollide
    fakeHitbox.Transparency = HitboxConfig.Transparency
    fakeHitbox.BrickColor = HitboxConfig.Color
    fakeHitbox.Material = Enum.Material.ForceField
    fakeHitbox.TopSurface = Enum.SurfaceType.Smooth
    fakeHitbox.BottomSurface = Enum.SurfaceType.Smooth
    
    -- –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä —á—Ç–æ —Ö–∏—Ç–±–æ–∫—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω
    local marker = Instance.new("Part", player)
    marker.Name = "FakeHitbox"
    marker.Transparency = 1
    marker.CanCollide = false
    marker.Anchored = true
    marker.Size = Vector3.new(0.1, 0.1, 0.1)
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö–∏—Ç–±–æ–∫—Å –∫ –∏–≥—Ä–æ–∫—É
    local function updateHitboxPosition()
        if player and player:FindFirstChild("HumanoidRootPart") and fakeHitbox and fakeHitbox.Parent then
            fakeHitbox.CFrame = player.HumanoidRootPart.CFrame
        end
    end
    
    -- –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    local connection
    if HitboxConfig.UpdateRate > 0 then
        -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        connection = task.spawn(function()
            while player and player.Parent and fakeHitbox and fakeHitbox.Parent do
                updateHitboxPosition()
                task.wait(HitboxConfig.UpdateRate)
            end
        end)
    else
        -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        connection = game:GetService("RunService").Heartbeat:Connect(updateHitboxPosition)
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
    table.insert(hitboxList, fakeHitbox)
    table.insert(hitboxList, marker)
    hitboxConnections[player] = connection
    
    -- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    updateHitboxPosition()
end

-- –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ö–∏—Ç–±–æ–∫—Å–æ–≤
local function RemoveAllHitboxes()
    -- –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for player, connection in pairs(hitboxConnections) do
        if typeof(connection) == "RBXScriptConnection" then
            connection:Disconnect()
        elseif typeof(connection) == "thread" then
            task.cancel(connection)
        end
    end
    hitboxConnections = {}
    
    -- –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ö–∏—Ç–±–æ–∫—Å—ã
    for _, hitbox in pairs(hitboxList) do
        if hitbox and hitbox.Parent then
            hitbox:Destroy()
        end
    end
    hitboxList = {}
    
    -- –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for _, player in pairs(game.Workspace:GetChildren()) do
        if player:IsA("Model") then
            local fakeMarker = player:FindFirstChild("FakeHitbox")
            if fakeMarker then
                fakeMarker:Destroy()
            end
        end
    end
end

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ö–∏—Ç–±–æ–∫—Å–æ–≤ –∫–æ –≤—Å–µ–º —Ç–µ–∫—É—â–∏–º –∏–≥—Ä–æ–∫–∞–º
local function ApplyHitboxesToAll()
    for _, player in pairs(game.Workspace:GetChildren()) do
        if player:IsA("Model") and player:FindFirstChild("HumanoidRootPart") and player:FindFirstChild("Head") then
            CreateHitbox(player)
        end
    end
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ö–∏—Ç–±–æ–∫—Å–æ–≤
local function EnableHitboxExpander()
    if isHitboxEnabled then
        return
    end
    
    isHitboxEnabled = true
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ö–∏—Ç–±–æ–∫—Å—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–≥—Ä–æ–∫–∞–º
    ApplyHitboxesToAll()
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    hitboxConnections.newPlayerConnection = game.Workspace.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("Model") and descendant:FindFirstChild("HumanoidRootPart") and descendant:FindFirstChild("Head") then
            task.wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            CreateHitbox(descendant)
        end
    end)
    
    print("‚úì Hitbox Expander enabled")
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ö–∏—Ç–±–æ–∫—Å–æ–≤
local function DisableHitboxExpander()
    if not isHitboxEnabled then
        return
    end
    
    isHitboxEnabled = false
    RemoveAllHitboxes()
    
    print("‚úó Hitbox Expander disabled")
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
local function CleanupHitboxExpander()
    DisableHitboxExpander()
    
    -- –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    _G.EnableHitboxExpander = nil
    _G.DisableHitboxExpander = nil
    _G.CleanupHitboxExpander = nil
    _G.SetHitboxSize = nil
    _G.SetHitboxTransparency = nil
    _G.SetHitboxCanCollide = nil
    _G.SetHitboxTargetPart = nil
    
    print("üßπ Hitbox Expander cleaned up")
end

-- –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
local function SetHitboxSize(size)
    HitboxConfig.SizeX = size
    HitboxConfig.SizeY = size * 1.5 -- –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    HitboxConfig.SizeZ = size
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∏—Ç–±–æ–∫—Å—ã
    if isHitboxEnabled then
        DisableHitboxExpander()
        EnableHitboxExpander()
    end
    
    print("üìè Hitbox size set to:", size)
end

local function SetHitboxTransparency(transparency)
    HitboxConfig.Transparency = math.clamp(transparency, 0, 1)
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∏—Ç–±–æ–∫—Å—ã
    for _, hitbox in pairs(hitboxList) do
        if hitbox and hitbox.Parent and hitbox.Name ~= "FakeHitbox" then
            hitbox.Transparency = HitboxConfig.Transparency
        end
    end
    
    print("üëª Hitbox transparency set to:", HitboxConfig.Transparency)
end

local function SetHitboxCanCollide(canCollide)
    HitboxConfig.CanCollide = canCollide
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∏—Ç–±–æ–∫—Å—ã
    for _, hitbox in pairs(hitboxList) do
        if hitbox and hitbox.Parent and hitbox.Name ~= "FakeHitbox" then
            hitbox.CanCollide = HitboxConfig.CanCollide
        end
    end
    
    print("üöß Hitbox CanCollide set to:", canCollide)
end

local function SetHitboxTargetPart(partName)
    HitboxConfig.SelectPart = partName or "Head"
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–∏—Ç–±–æ–∫—Å—ã
    if isHitboxEnabled then
        DisableHitboxExpander()
        EnableHitboxExpander()
    end
    
    print("üéØ Hitbox target part set to:", HitboxConfig.SelectPart)
end

-- –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
_G.EnableHitboxExpander = EnableHitboxExpander
_G.DisableHitboxExpander = DisableHitboxExpander  
_G.CleanupHitboxExpander = CleanupHitboxExpander
_G.SetHitboxSize = SetHitboxSize
_G.SetHitboxTransparency = SetHitboxTransparency
_G.SetHitboxCanCollide = SetHitboxCanCollide
_G.SetHitboxTargetPart = SetHitboxTargetPart

print("üéØ Hitbox System loaded successfully!")
print("üìã Available functions:")
print("   ‚Ä¢ _G.EnableHitboxExpander()")
print("   ‚Ä¢ _G.DisableHitboxExpander()")
print("   ‚Ä¢ _G.SetHitboxSize(number)")
print("   ‚Ä¢ _G.SetHitboxTransparency(0-1)")
print("   ‚Ä¢ _G.SetHitboxCanCollide(boolean)")
print("   ‚Ä¢ _G.SetHitboxTargetPart(string)")
print("   ‚Ä¢ _G.CleanupHitboxExpander()")

-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
-- EnableHitboxExpander()
