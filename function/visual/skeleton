-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera

-- Hardcoded Skeleton ESP Settings
local skeleton_esp_settings = {
    enabled = true, -- Master toggle for Skeleton ESP
    line_color = Color3.new(1, 1, 1), -- White
    line_transparency = 0, -- 0 = fully opaque, 1 = fully transparent
    line_thickness = 2, -- Line thickness
    outline_enabled = true, -- Enable outline
    outline_color = Color3.new(0, 0, 0), -- Black outline
    outline_thickness = 3, -- Outline thickness
    head_circle_enabled = true, -- Enable head circle
    head_circle_color = Color3.new(1, 0, 0), -- Red head circle
    head_circle_size = 6, -- Head circle radius
    head_circle_filled = false, -- Fill head circle
    teamcheck = false, -- Disable team check
    team_color = false, -- Use team colors
    maxdistance = 200, -- Maximum distance for ESP rendering
    distancelimit = false, -- Disable distance limit
    autothickness = true -- Auto adjust thickness based on distance
}

-- Skeleton bone connections for R15 and R6
local skeleton_bones = {
    R15 = {
        ["Head"] = "UpperTorso",
        ["UpperTorso"] = "LowerTorso",
        ["LeftUpperArm"] = "UpperTorso",
        ["LeftLowerArm"] = "LeftUpperArm", 
        ["LeftHand"] = "LeftLowerArm",
        ["RightUpperArm"] = "UpperTorso",
        ["RightLowerArm"] = "RightUpperArm",
        ["RightHand"] = "RightLowerArm",
        ["LeftUpperLeg"] = "LowerTorso",
        ["LeftLowerLeg"] = "LeftUpperLeg",
        ["LeftFoot"] = "LeftLowerLeg",
        ["RightUpperLeg"] = "LowerTorso",
        ["RightLowerLeg"] = "RightUpperLeg",
        ["RightFoot"] = "RightLowerLeg"
    },
    R6 = {
        ["Head"] = "Torso",
        ["Left Arm"] = "Torso",
        ["Right Arm"] = "Torso",
        ["Left Leg"] = "Torso",
        ["Right Leg"] = "Torso"
    }
}

-- Utility Functions
local function worldToScreen(world)
    local screen, inBounds = Camera:WorldToViewportPoint(world)
    return Vector2.new(screen.X, screen.Y), inBounds, screen.Z
end

local function createLine(color, thickness)
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = color
    line.Thickness = thickness
    line.Transparency = 1 - skeleton_esp_settings.line_transparency
    line.ZIndex = 2
    return line
end

local function createOutline(color, thickness)
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = color
    line.Thickness = thickness
    line.Transparency = 1 - skeleton_esp_settings.line_transparency
    line.ZIndex = 1
    return line
end

local function createHeadCircle(color, size, filled)
    local circle = Drawing.new("Circle")
    circle.Visible = false
    circle.Position = Vector2.new(0, 0)
    circle.Radius = size
    circle.Color = color
    circle.Thickness = skeleton_esp_settings.line_thickness
    circle.Filled = filled
    circle.Transparency = 1 - skeleton_esp_settings.line_transparency
    circle.ZIndex = 3
    return circle
end

local function calculateThickness(distance)
    if skeleton_esp_settings.autothickness then
        return math.clamp(skeleton_esp_settings.line_thickness * (100 / distance), 1, 4)
    end
    return skeleton_esp_settings.line_thickness
end

-- Skeleton ESP Management
local loaded_players = {}

local function create_skeleton_esp(model)
    if not (model and model:FindFirstChild("HumanoidRootPart")) then
        return
    end
    
    -- Find player object for team checks
    local player = nil
    for _, p in pairs(Players:GetPlayers()) do
        if p.Character == model then
            player = p
            break
        end
    end
    
    -- Determine rig type
    local humanoid = model:FindFirstChild("Humanoid")
    local isR15 = humanoid and humanoid.RigType == Enum.HumanoidRigType.R15
    local bones = isR15 and skeleton_bones.R15 or skeleton_bones.R6
    
    local lines = {}
    local outlines = {}
    local head_circle = nil
    local head_outline = nil
    
    -- Create lines and outlines for each bone connection
    for boneName, parentName in pairs(bones) do
        lines[boneName] = createLine(skeleton_esp_settings.line_color, skeleton_esp_settings.line_thickness)
        if skeleton_esp_settings.outline_enabled then
            outlines[boneName] = createOutline(skeleton_esp_settings.outline_color, skeleton_esp_settings.outline_thickness)
        end
    end
    
    -- Create head circle
    if skeleton_esp_settings.head_circle_enabled then
        head_circle = createHeadCircle(skeleton_esp_settings.head_circle_color, skeleton_esp_settings.head_circle_size, skeleton_esp_settings.head_circle_filled)
        if skeleton_esp_settings.outline_enabled then
            head_outline = createHeadCircle(skeleton_esp_settings.outline_color, skeleton_esp_settings.head_circle_size + 1, false)
        end
    end
    
    loaded_players[model] = {
        player = player,
        isR15 = isR15,
        bones = bones,
        obj = {
            lines = lines,
            outlines = outlines,
            head_circle = head_circle,
            head_outline = head_outline
        },
        connection = nil
    }
    
    local plr_data = loaded_players[model]
    local obj = plr_data.obj
    local character = model
    local hrp = model:FindFirstChild("HumanoidRootPart")
    local humanoid = model:FindFirstChild("Humanoid")

    plr_data.connection = RunService.RenderStepped:Connect(function()
        if not (skeleton_esp_settings.enabled and hrp and character and character.Parent) then
            -- Hide all objects
            for _, line in pairs(obj.lines) do
                line.Visible = false
            end
            for _, outline in pairs(obj.outlines) do
                outline.Visible = false
            end
            if obj.head_circle then obj.head_circle.Visible = false end
            if obj.head_outline then obj.head_outline.Visible = false end
            return
        end
        
        -- Check if character is alive
        if humanoid and humanoid.Health <= 0 then
            for _, line in pairs(obj.lines) do
                line.Visible = false
            end
            for _, outline in pairs(obj.outlines) do
                outline.Visible = false
            end
            if obj.head_circle then obj.head_circle.Visible = false end
            if obj.head_outline then obj.head_outline.Visible = false end
            return
        end

        local _, onScreen = worldToScreen(hrp.Position)
        if not onScreen then
            for _, line in pairs(obj.lines) do
                line.Visible = false
            end
            for _, outline in pairs(obj.outlines) do
                outline.Visible = false
            end
            if obj.head_circle then obj.head_circle.Visible = false end
            if obj.head_outline then obj.head_outline.Visible = false end
            return
        end

        -- Distance check
        local distance = (Camera.CFrame.Position - hrp.Position).Magnitude
        if skeleton_esp_settings.distancelimit and distance > skeleton_esp_settings.maxdistance then
            for _, line in pairs(obj.lines) do
                line.Visible = false
            end
            for _, outline in pairs(obj.outlines) do
                outline.Visible = false
            end
            if obj.head_circle then obj.head_circle.Visible = false end
            if obj.head_outline then obj.head_outline.Visible = false end
            return
        end

        -- Team check
        if skeleton_esp_settings.teamcheck and plr_data.player and Players.LocalPlayer then
            if plr_data.player.Team == Players.LocalPlayer.Team then
                for _, line in pairs(obj.lines) do
                    line.Visible = false
                end
                for _, outline in pairs(obj.outlines) do
                    outline.Visible = false
                end
                if obj.head_circle then obj.head_circle.Visible = false end
                if obj.head_outline then obj.head_outline.Visible = false end
                return
            end
        end

        -- Determine colors
        local lineColor = skeleton_esp_settings.line_color
        local headColor = skeleton_esp_settings.head_circle_color
        if skeleton_esp_settings.team_color and plr_data.player and plr_data.player.TeamColor then
            lineColor = plr_data.player.TeamColor.Color
            headColor = plr_data.player.TeamColor.Color
        end

        -- Calculate thickness based on distance
        local thickness = calculateThickness(distance)
        local outlineThickness = skeleton_esp_settings.outline_enabled and (thickness + 1) or thickness

        -- Draw head circle
        if skeleton_esp_settings.head_circle_enabled and obj.head_circle then
            local head = character:FindFirstChild("Head")
            if head then
                local headPos, headOnScreen = worldToScreen(head.Position)
                if headOnScreen then
                    -- Draw head outline first
                    if obj.head_outline then
                        obj.head_outline.Position = headPos
                        obj.head_outline.Radius = skeleton_esp_settings.head_circle_size + 1
                        obj.head_outline.Color = skeleton_esp_settings.outline_color
                        obj.head_outline.Thickness = outlineThickness
                        obj.head_outline.Visible = skeleton_esp_settings.outline_enabled
                    end
                    
                    -- Draw head circle
                    obj.head_circle.Position = headPos
                    obj.head_circle.Radius = skeleton_esp_settings.head_circle_size
                    obj.head_circle.Color = headColor
                    obj.head_circle.Thickness = thickness
                    obj.head_circle.Transparency = 1 - skeleton_esp_settings.line_transparency
                    obj.head_circle.Visible = true
                else
                    obj.head_circle.Visible = false
                    if obj.head_outline then obj.head_outline.Visible = false end
                end
            else
                obj.head_circle.Visible = false
                if obj.head_outline then obj.head_outline.Visible = false end
            end
        end

        -- Draw skeleton lines
        for boneName, parentName in pairs(plr_data.bones) do
            local bone = character:FindFirstChild(boneName)
            local parentBone = character:FindFirstChild(parentName)
            local line = obj.lines[boneName]
            local outline = obj.outlines[boneName]
            
            if bone and parentBone and line then
                local bonePos, boneOnScreen = worldToScreen(bone.Position)
                local parentPos, parentOnScreen = worldToScreen(parentBone.Position)
                
                if boneOnScreen and parentOnScreen then
                    -- Draw outline first (thicker, behind)
                    if skeleton_esp_settings.outline_enabled and outline then
                        outline.From = bonePos
                        outline.To = parentPos
                        outline.Color = skeleton_esp_settings.outline_color
                        outline.Thickness = outlineThickness
                        outline.Transparency = 1 - skeleton_esp_settings.line_transparency
                        outline.Visible = true
                    end
                    
                    -- Draw main line (thinner, in front)
                    line.From = bonePos
                    line.To = parentPos
                    line.Color = lineColor
                    line.Thickness = thickness
                    line.Transparency = 1 - skeleton_esp_settings.line_transparency
                    line.Visible = true
                else
                    line.Visible = false
                    if outline then outline.Visible = false end
                end
            else
                if line then line.Visible = false end
                if outline then outline.Visible = false end
            end
        end
    end)
end

local function destroy_skeleton_esp(model)
    local plr_data = loaded_players[model]
    if not plr_data then return end
    
    if plr_data.connection then
        plr_data.connection:Disconnect()
    end
    
    for _, line in pairs(plr_data.obj.lines) do
        line:Remove()
    end
    
    for _, outline in pairs(plr_data.obj.outlines) do
        outline:Remove()
    end
    
    if plr_data.obj.head_circle then
        plr_data.obj.head_circle:Remove()
    end
    
    if plr_data.obj.head_outline then
        plr_data.obj.head_outline:Remove()
    end
    
    loaded_players[model] = nil
end

-- Initialize Skeleton ESP for existing players
for _, v in ipairs(Workspace:GetChildren()) do
    create_skeleton_esp(v)
end

-- Handle player addition and removal
Workspace.ChildAdded:Connect(create_skeleton_esp)
Workspace.ChildRemoved:Connect(destroy_skeleton_esp)

-- Global functions for external control
_G.DisableSkeletonESP = function()
    skeleton_esp_settings.enabled = false
end

_G.EnableSkeletonESP = function()
    skeleton_esp_settings.enabled = true
end

_G.CleanupSkeletonESP = function()
    for model, plr_data in pairs(loaded_players) do
        destroy_skeleton_esp(model)
    end
end

-- Additional settings functions
_G.SetSkeletonOutlineEnabled = function(enabled)
    skeleton_esp_settings.outline_enabled = enabled
end

_G.SetSkeletonHeadCircleEnabled = function(enabled)
    skeleton_esp_settings.head_circle_enabled = enabled
end

_G.SetSkeletonLineColor = function(color)
    skeleton_esp_settings.line_color = color
end

_G.SetSkeletonHeadColor = function(color)
    skeleton_esp_settings.head_circle_color = color
end

_G.SetSkeletonTeamCheck = function(enabled)
    skeleton_esp_settings.teamcheck = enabled
end

_G.SetSkeletonTeamColor = function(enabled)
    skeleton_esp_settings.team_color = enabled
end

_G.SetSkeletonAutoThickness = function(enabled)
    skeleton_esp_settings.autothickness = enabled
end

-- Cleanup on script termination (if needed)
pcall(function()
    game:BindToClose(function()
        for model, plr_data in pairs(loaded_players) do
            destroy_skeleton_esp(model)
        end
    end)
end)
