-- Improved Skeleton ESP Script with better architecture
-- Based on the logic from the second script

-- Required dependencies and services
local workspace = cloneref and cloneref(game:GetService("Workspace")) or game:GetService("Workspace")
local Players = cloneref and cloneref(game:GetService("Players")) or game:GetService("Players")
local RunService = cloneref and cloneref(game:GetService("RunService")) or game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Main cheat table
local SkeletonESP = {
    connections = {
        renderstepped = {}
    },
    drawings = {},
    loaded_players = {},
    __loaded = false
}

-- Settings
SkeletonESP.settings = {
    skeleton_enabled = true,
    skeleton_color = Color3.fromRGB(255, 255, 255),
    skeleton_transparency = 1,
    skeleton_thickness = 2,
    head_size = 8,
    team_check = false,
    team_color = false,
    autothickness = true,
    distance_limit = false,
    max_distance = 200
}

-- Utility functions
SkeletonESP.utility = {}

SkeletonESP.utility.new_renderstepped = function(func)
    local obj = {}
    SkeletonESP.connections.renderstepped[func] = func
    function obj:Disconnect()
        if func then
            SkeletonESP.connections.renderstepped[func] = nil
            func = nil
        end
    end
    return obj
end

SkeletonESP.utility.new_drawing = function(drawobj, args)
    local obj = Drawing.new(drawobj)
    for i, v in pairs(args or {}) do
        obj[i] = v
    end
    SkeletonESP.drawings[obj] = obj
    return obj
end

-- Initialize render connection
local render_connection = RunService.RenderStepped:Connect(function(delta)
    for _, func in pairs(SkeletonESP.connections.renderstepped) do
        pcall(func, delta)
    end
end)

-- Skeleton bone structure for R15 and R6
local skeleton_bones = {
    R15 = {
        ["Head"] = "UpperTorso",
        ["UpperTorso"] = "LowerTorso",
        ["LeftUpperArm"] = "UpperTorso",
        ["LeftLowerArm"] = "LeftUpperArm", 
        ["LeftHand"] = "LeftLowerArm",
        ["RightUpperArm"] = "UpperTorso",
        ["RightLowerArm"] = "RightUpperArm",
        ["RightHand"] = "RightLowerArm",
        ["LeftUpperLeg"] = "LowerTorso",
        ["LeftLowerLeg"] = "LeftUpperLeg",
        ["LeftFoot"] = "LeftLowerLeg",
        ["RightUpperLeg"] = "LowerTorso",
        ["RightLowerLeg"] = "RightUpperLeg",
        ["RightFoot"] = "RightLowerLeg"
    },
    R6 = {
        ["Head"] = "Torso",
        ["Left Arm"] = "Torso",
        ["Right Arm"] = "Torso",
        ["Left Leg"] = "Torso",
        ["Right Leg"] = "Torso"
    }
}

-- Helper functions
local function hasCharacter(player)
    return player and player.Character and 
           player.Character:FindFirstChild("HumanoidRootPart") and 
           player.Character:FindFirstChild("Humanoid") and
           player ~= LocalPlayer
end

local function worldToScreen(position)
    local screen, onScreen = Camera:WorldToViewportPoint(position)
    return Vector2.new(screen.X, screen.Y), onScreen, screen.Z
end

local function getPlayerColor(player)
    local color = SkeletonESP.settings.skeleton_color
    
    if SkeletonESP.settings.team_check and LocalPlayer.Team then
        if player.Team == LocalPlayer.Team then
            color = Color3.fromRGB(0, 255, 0) -- Green for teammates
        else
            color = Color3.fromRGB(255, 0, 0) -- Red for enemies
        end
    elseif SkeletonESP.settings.team_color and player.Team then
        color = player.TeamColor.Color
    end
    
    return color
end

local function calculateThickness(distance)
    if SkeletonESP.settings.autothickness then
        return math.clamp(1/distance*100, 1, 4)
    end
    return SkeletonESP.settings.skeleton_thickness
end

-- Main ESP creation function
local function createPlayerESP(player)
    if not hasCharacter(player) then return end
    
    local character = player.Character
    local humanoid = character:FindFirstChild("Humanoid")
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not humanoidRootPart then return end
    
    -- Determine rig type
    local isR15 = humanoid.RigType == Enum.HumanoidRigType.R15
    local bones = isR15 and skeleton_bones.R15 or skeleton_bones.R6
    
    -- Create ESP object for player
    local playerESP = {
        player = player,
        character = character,
        drawings = {},
        connection = nil,
        isR15 = isR15
    }
    
    -- Create drawing objects for skeleton
    for boneName, _ in pairs(bones) do
        playerESP.drawings["line_" .. boneName] = SkeletonESP.utility.new_drawing("Line", {
            Visible = false,
            Color = SkeletonESP.settings.skeleton_color,
            Thickness = SkeletonESP.settings.skeleton_thickness,
            Transparency = SkeletonESP.settings.skeleton_transparency
        })
    end
    
    -- Create head circle
    playerESP.drawings.head_circle = SkeletonESP.utility.new_drawing("Circle", {
        Visible = false,
        Color = SkeletonESP.settings.skeleton_color,
        Thickness = SkeletonESP.settings.skeleton_thickness,
        Radius = SkeletonESP.settings.head_size,
        Filled = false,
        Transparency = SkeletonESP.settings.skeleton_transparency
    })
    
    -- Update function for this player
    function playerESP:update()
        if not hasCharacter(self.player) then
            return self:setVisible(false)
        end
        
        local character = self.player.Character
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        local humanoid = character:FindFirstChild("Humanoid")
        
        if not humanoidRootPart or not humanoid or humanoid.Health <= 0 then
            return self:setVisible(false)
        end
        
        -- Distance check
        local distance = (Camera.CFrame.Position - humanoidRootPart.Position).Magnitude
        if SkeletonESP.settings.distance_limit and distance > SkeletonESP.settings.max_distance then
            return self:setVisible(false)
        end
        
        -- Screen position check
        local _, onScreen = worldToScreen(humanoidRootPart.Position)
        if not onScreen then
            return self:setVisible(false)
        end
        
        self:setVisible(true)
        
        -- Update colors and thickness
        local color = getPlayerColor(self.player)
        local thickness = calculateThickness(distance)
        
        -- Draw skeleton
        if SkeletonESP.settings.skeleton_enabled then
            self:drawSkeleton(character, color, thickness)
        end
    end
    
    function playerESP:drawSkeleton(character, color, thickness)
        local bones = self.isR15 and skeleton_bones.R15 or skeleton_bones.R6
        
        -- Update head circle
        local head = character:FindFirstChild("Head")
        if head then
            local headPos, headOnScreen = worldToScreen(head.Position)
            if headOnScreen then
                self.drawings.head_circle.Position = headPos
                self.drawings.head_circle.Color = color
                self.drawings.head_circle.Thickness = thickness
                self.drawings.head_circle.Visible = true
            end
        end
        
        -- Draw skeleton lines
        for boneName, parentName in pairs(bones) do
            local bone = character:FindFirstChild(boneName)
            local parentBone = character:FindFirstChild(parentName)
            local lineObj = self.drawings["line_" .. boneName]
            
            if bone and parentBone and lineObj then
                local bonePos, boneOnScreen = worldToScreen(bone.Position)
                local parentPos, parentOnScreen = worldToScreen(parentBone.Position)
                
                if boneOnScreen and parentOnScreen then
                    lineObj.From = bonePos
                    lineObj.To = parentPos
                    lineObj.Color = color
                    lineObj.Thickness = thickness
                    lineObj.Visible = true
                else
                    lineObj.Visible = false
                end
            elseif lineObj then
                lineObj.Visible = false
            end
        end
        
        -- Special handling for R6 limb connections
        if not self.isR15 then
            self:drawR6LimbConnections(character, color, thickness)
        end
    end
    
    function playerESP:drawR6LimbConnections(character, color, thickness)
        local torso = character:FindFirstChild("Torso")
        if not torso then return end
        
        local limbs = {"Left Arm", "Right Arm", "Left Leg", "Right Leg"}
        for _, limbName in pairs(limbs) do
            local limb = character:FindFirstChild(limbName)
            local lineObj = self.drawings["line_" .. limbName]
            
            if limb and lineObj then
                -- Calculate limb endpoints for R6
                local limbHeight = limb.Size.Y / 2 - 0.2
                local upperPos = worldToScreen((limb.CFrame * CFrame.new(0, limbHeight, 0)).Position)
                local lowerPos = worldToScreen((limb.CFrame * CFrame.new(0, -limbHeight, 0)).Position)
                
                lineObj.From = upperPos
                lineObj.To = lowerPos
                lineObj.Color = color
                lineObj.Thickness = thickness
                lineObj.Visible = true
            end
        end
    end
    
    function playerESP:setVisible(visible)
        for _, drawing in pairs(self.drawings) do
            drawing.Visible = visible
        end
    end
    
    function playerESP:destroy()
        if self.connection then
            self.connection:Disconnect()
        end
        for _, drawing in pairs(self.drawings) do
            drawing:Remove()
        end
        SkeletonESP.loaded_players[self.player] = nil
    end
    
    -- Start update loop for this player
    playerESP.connection = SkeletonESP.utility.new_renderstepped(function()
        playerESP:update()
    end)
    
    SkeletonESP.loaded_players[player] = playerESP
end

-- Destroy player ESP
local function destroyPlayerESP(player)
    local playerESP = SkeletonESP.loaded_players[player]
    if playerESP then
        playerESP:destroy()
    end
end

-- Main ESP functions
function SkeletonESP.load()
    if SkeletonESP.__loaded then
        warn("[SkeletonESP] Already loaded!")
        return
    end
    
    -- Create ESP for existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            createPlayerESP(player)
        end
    end
    
    -- Handle new players
    SkeletonESP.playerAdded = Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function()
            task.wait(0.1) -- Small delay to ensure character is fully loaded
            createPlayerESP(player)
        end)
        
        if player.Character then
            createPlayerESP(player)
        end
    end)
    
    -- Handle player removal
    SkeletonESP.playerRemoving = Players.PlayerRemoving:Connect(function(player)
        destroyPlayerESP(player)
    end)
    
    -- Handle character respawning for existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            player.CharacterAdded:Connect(function()
                task.wait(0.1)
                createPlayerESP(player)
            end)
            
            player.CharacterRemoving:Connect(function()
                destroyPlayerESP(player)
            end)
        end
    end
    
    SkeletonESP.__loaded = true
    print("[SkeletonESP] Loaded successfully!")
end

function SkeletonESP.unload()
    if not SkeletonESP.__loaded then
        warn("[SkeletonESP] Not loaded yet!")
        return
    end
    
    -- Disconnect connections
    if SkeletonESP.playerAdded then
        SkeletonESP.playerAdded:Disconnect()
    end
    if SkeletonESP.playerRemoving then
        SkeletonESP.playerRemoving:Disconnect()
    end
    if render_connection then
        render_connection:Disconnect()
    end
    
    -- Clear all render connections
    for func, _ in pairs(SkeletonESP.connections.renderstepped) do
        SkeletonESP.connections.renderstepped[func] = nil
    end
    
    -- Destroy all player ESP
    for player, _ in pairs(SkeletonESP.loaded_players) do
        destroyPlayerESP(player)
    end
    
    -- Remove all drawings
    for drawing, _ in pairs(SkeletonESP.drawings) do
        drawing:Remove()
        SkeletonESP.drawings[drawing] = nil
    end
    
    SkeletonESP.__loaded = false
    print("[SkeletonESP] Unloaded successfully!")
end

-- Update all players (refresh settings)
function SkeletonESP.updateAll()
    for _, playerESP in pairs(SkeletonESP.loaded_players) do
        -- Force update will happen automatically on next render frame
    end
end

-- Global functions for compatibility
_G.SkeletonESP = SkeletonESP
_G.EnableSkeletonESP = function()
    SkeletonESP.settings.skeleton_enabled = true
end
_G.DisableSkeletonESP = function()
    SkeletonESP.settings.skeleton_enabled = false
end
_G.CleanupSkeletonESP = SkeletonESP.unload

-- Auto-load
SkeletonESP.load()

return SkeletonESP
